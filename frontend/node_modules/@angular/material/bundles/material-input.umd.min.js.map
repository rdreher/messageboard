{"version":3,"file":"material-input.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/input/input-errors.ts","../../src/lib/input/autofill.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  OnDestroy,\n  OnInit,\n  Output\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {empty as observableEmpty} from 'rxjs/observable/empty';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** An event that is emitted when the autofill state of an input changes. */\nexport type AutofillEvent = {\n  /** The element whose autofill state changes. */\n  target: Element;\n  /** Whether the element is currently autofilled. */\n  isAutofilled: boolean;\n};\n\n\n/** Used to track info about currently monitored elements. */\ntype MonitoredElementInfo = {\n  subject: Subject<AutofillEvent>;\n  unlisten: () => void;\n};\n\n\n/** Options to pass to the animationstart listener. */\nconst listenerOptions: any = supportsPassiveEventListeners() ? {passive: true} : false;\n\n\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\n@Injectable()\nexport class AutofillMonitor implements OnDestroy {\n  private _monitoredElements = new Map<Element, MonitoredElementInfo>();\n\n  constructor(private _platform: Platform) {}\n\n  /**\n   * Monitor for changes in the autofill state of the given input element.\n   * @param element The element to monitor.\n   * @return A stream of autofill state changes.\n   */\n  monitor(element: Element): Observable<AutofillEvent> {\n    if (!this._platform.isBrowser) {\n      return observableEmpty();\n    }\n\n    const info = this._monitoredElements.get(element);\n    if (info) {\n      return info.subject.asObservable();\n    }\n\n    const result = new Subject<AutofillEvent>();\n    const listener = (event: AnimationEvent) => {\n      if (event.animationName === 'mat-input-autofill-start') {\n        element.classList.add('mat-input-autofilled');\n        result.next({target: event.target as Element, isAutofilled: true});\n      } else if (event.animationName === 'mat-input-autofill-end') {\n        element.classList.remove('mat-input-autofilled');\n        result.next({target: event.target as Element, isAutofilled: false});\n      }\n    };\n\n    element.addEventListener('animationstart', listener, listenerOptions);\n    element.classList.add('mat-input-autofill-monitored');\n\n    this._monitoredElements.set(element, {\n      subject: result,\n      unlisten: () => {\n        element.removeEventListener('animationstart', listener, listenerOptions);\n      }\n    });\n\n    return result.asObservable();\n  }\n\n  /**\n   * Stop monitoring the autofill state of the given input element.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: Element) {\n    const info = this._monitoredElements.get(element);\n\n    if (info) {\n      info.unlisten();\n      info.subject.complete();\n      element.classList.remove('mat-input-autofill-monitored');\n      element.classList.remove('mat-input-autofilled');\n      this._monitoredElements.delete(element);\n    }\n  }\n\n  ngOnDestroy() {\n    this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n  }\n}\n\n\n/** A directive that can be used to monitor the autofill state of an input. */\n@Directive({\n  selector: '[matAutofill]',\n})\nexport class MatAutofill implements OnDestroy, OnInit {\n  @Output() matAutofill: EventEmitter<AutofillEvent> = new EventEmitter<AutofillEvent>();\n\n  constructor(private _elementRef: ElementRef, private _autofillMonitor: AutofillMonitor) {}\n\n  ngOnInit() {\n    this._autofillMonitor\n      .monitor(this._elementRef.nativeElement)\n      .subscribe(event => this.matAutofill.emit(event));\n  }\n\n  ngOnDestroy() {\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {auditTime} from 'rxjs/operators/auditTime';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n@Directive({\n  selector: `textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'matTextareaAutosize',\n  host: {\n    'class': 'mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class MatTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue: string;\n  private readonly _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('matAutosizeMinRows')\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n  get minRows(): number { return this._minRows; }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('matAutosizeMaxRows')\n  get maxRows(): number { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _platform: Platform,\n    private _ngZone?: NgZone) {}\n\n  // TODO(crisbeto): make the `_ngZone` a required param in the next major version.\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => {\n          fromEvent(window, 'resize')\n            .pipe(auditTime(16), takeUntil(this._destroyed))\n            .subscribe(() => this.resizeToFitContent(true));\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Sets a style property on the textarea element. */\n  private _setTextareaStyle(property: string, value: string): void {\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    textarea.style[property] = value;\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = textarea.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    textarea.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue && !force) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n    textarea.placeholder = '';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n    textarea.placeholder = placeholderText;\n\n    this._previousValue = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs/Subject';\nimport {AutofillMonitor} from './autofill';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string = '';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {AutofillMonitor, MatAutofill} from './autofill';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [\n    MatAutofill,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatAutofill,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher, AutofillMonitor],\n})\nexport class MatInputModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","getMatInputUnsupportedTypeError","type","Error","setPrototypeOf","__proto__","Array","p","hasOwnProperty","listenerOptions","supportsPassiveEventListeners","passive","AutofillMonitor","_platform","_monitoredElements","Map","monitor","element","isBrowser","observableEmpty","info","get","subject","asObservable","result","Subject","listener","event","animationName","classList","add","next","target","isAutofilled","remove","addEventListener","set","unlisten","removeEventListener","stopMonitoring","complete","delete","ngOnDestroy","_this","forEach","_info","Injectable","Platform","MatAutofill","_elementRef","_autofillMonitor","matAutofill","EventEmitter","ngOnInit","nativeElement","subscribe","emit","Directive","args","selector","ElementRef","Output","MatTextareaAutosize","_ngZone","_destroyed","defineProperty","_minRows","value","_setMinHeight","_maxRows","_setMaxHeight","minHeight","minRows","_cachedLineHeight","_setTextareaStyle","maxHeight","maxRows","ngAfterViewInit","resizeToFitContent","runOutsideAngular","fromEvent","window","pipe","auditTime","takeUntil","property","style","_cacheTextareaLineHeight","textarea","textareaClone","cloneNode","rows","position","visibility","border","padding","height","overflow","appendChild","clientHeight","removeChild","ngDoCheck","force","_previousValue","placeholderText","placeholder","scrollHeight","exportAs","host","class","NgZone","Input","MAT_INPUT_VALUE_ACCESSOR","InjectionToken","MAT_INPUT_INVALID_TYPES","nextUniqueId","MatInputBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatInputMixinBase","mixinErrorState","MatInput","inputValueAccessor","_super","call","_uid","_isServer","focused","stateChanges","controlType","autofilled","_disabled","_required","_type","_readonly","_neverEmptyInputTypes","filter","t","getSupportedInputTypes","has","_inputValueAccessor","_previousNativeValue","id","IOS","el","selectionStart","selectionEnd","setSelectionRange","tslib_1.__extends","disabled","coerceBooleanProperty","_id","_validateType","_isTextarea","ngOnChanges","updateErrorState","_dirtyCheckNativeValue","focus","_focusChanged","isFocused","readonly","_onInput","newValue","indexOf","_isNeverEmpty","_isBadInput","validity","badInput","nodeName","name","toLowerCase","empty","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","[class.mat-input-server]","[attr.id]","[placeholder]","[disabled]","[required]","[readonly]","[attr.aria-describedby]","[attr.aria-invalid]","[attr.aria-required]","(blur)","(focus)","(input)","providers","provide","MatFormFieldControl","useExisting","NgControl","decorators","Optional","Self","NgForm","FormGroupDirective","ErrorStateMatcher","undefined","Inject","required","errorStateMatcher","MatInputModule","NgModule","declarations","imports","CommonModule","MatFormFieldModule","PlatformModule","exports"],"mappings":"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"}
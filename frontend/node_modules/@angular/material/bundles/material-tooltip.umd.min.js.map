{"version":3,"file":"material-tooltip.umd.min.js","sources":["../../src/lib/tooltip/tooltip.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  ConnectionPositionPair,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  ScrollDispatcher,\n  OverlayConnectionPosition,\n  OverlayRef,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n  ConnectedPositionStrategy,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {matTooltipAnimations} from './tooltip-animations';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options');\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        // TODO(andrewjs): When the overlay's position can be\n        // dynamically changed, do not destroy the tooltip.\n        this._detach();\n        this._updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('tooltip-position')\n  get _positionDeprecated(): TooltipPosition { return this._position; }\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay =\n      this._defaultOptions ? this._defaultOptions.showDelay : 0;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay =\n      this._defaultOptions ? this._defaultOptions.hideDelay : 0;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions?: MatTooltipDefaultOptions) {\n\n    // TODO(crisbeto): make the `_defaultOptions` a required param next time we do breaking changes.\n    // @deletion-target 6.0.0\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions ? this._defaultOptions.touchendHideDelay : 1500);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay\n      .position()\n      .connectedTo(this._elementRef, origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback)\n      .withScrollableContainers(\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef)\n      );\n\n    strategy.onPositionChange.pipe(\n        filter(() => !!this._tooltipInstance),\n        takeUntil(this._destroyed)\n    ).subscribe(change => {\n      if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance!.isVisible()) {\n        // After position changes occur and the overlay is clipped by\n        // a parent scrollable then close the tooltip.\n        this._ngZone.run(() => this.hide(0));\n      } else {\n        // Otherwise recalculate the origin based on the new position.\n        this._tooltipInstance!._setTransformOrigin(change.connectionPair);\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position = this._overlayRef!.getConfig().positionStrategy as ConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position\n      .withPositions([])\n      .withFallbackPosition(origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OriginConnectionPosition;\n\n    if (this.position == 'above' || this.position == 'below') {\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isDirectionLtr ||\n               this.position == 'after' && !isDirectionLtr) {\n      position = {originX: 'start', originY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isDirectionLtr ||\n               this.position == 'before' && !isDirectionLtr) {\n      position = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.originX, position.originY);\n\n    return {\n      main: position,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OverlayConnectionPosition;\n\n    if (this.position == 'above') {\n      position = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (this.position == 'below') {\n      position = {overlayX: 'center', overlayY: 'top'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isLtr ||\n               this.position == 'after' && !isLtr) {\n      position = {overlayX: 'end', overlayY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isLtr ||\n               this.position == 'before' && !isLtr) {\n      position = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\n\n    return {\n      main: position,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = 'left';\n    } else if (position === 'end') {\n      this._transformOrigin = 'right';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {\n  MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltip,\n  TooltipComponent,\n} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n    LayoutModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n    ARIA_DESCRIBER_PROVIDER,\n    {\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\n      useValue: {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500\n      }\n    }\n  ],\n})\nexport class MatTooltipModule {}\n"],"names":["getMatTooltipInvalidPositionError","position","Error","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","scrollThrottle","SCROLL_THROTTLE_MS","matTooltipAnimations","tooltipState","trigger","state","style","transform","transition","animate","MAT_TOOLTIP_SCROLL_STRATEGY","InjectionToken","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","MAT_TOOLTIP_DEFAULT_OPTIONS","MatTooltip","_overlay","_elementRef","_scrollDispatcher","_viewContainerRef","_ngZone","_platform","_ariaDescriber","_focusMonitor","_scrollStrategy","_dir","_defaultOptions","_this","this","_position","_disabled","showDelay","hideDelay","_message","_manualListeners","Map","_destroyed","Subject","element","nativeElement","IOS","nodeName","webkitUserSelect","userSelect","set","show","hide","forEach","listener","event","addEventListener","monitor","pipe","takeUntil","subscribe","origin","run","Object","defineProperty","prototype","value","_overlayRef","_detach","_updatePosition","coerceBooleanProperty","removeDescription","trim","_isTooltipVisible","_updateTooltipMessage","describe","message","_tooltipClass","_tooltipInstance","_setTooltipClass","ngOnDestroy","dispose","removeEventListener","clear","next","complete","stopMonitoring","delay","disabled","overlayRef","_createOverlay","_portal","ComponentPortal","TooltipComponent","attach","instance","afterHidden","toggle","isVisible","_handleKeydown","e","keyCode","ESCAPE","stopPropagation","_handleTouchend","touchendHideDelay","_getOrigin","_getOverlayPosition","strategy","connectedTo","main","withFallbackPosition","fallback","withScrollableContainers","getAncestorScrollContainers","onPositionChange","filter","change","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","create","direction","positionStrategy","panelClass","scrollStrategy","detachments","hasAttached","detach","getConfig","withPositions","isDirectionLtr","originX","originY","_a","_invertPosition","x","y","isLtr","overlayX","overlayY","_markForCheck","onMicrotaskEmpty","asObservable","take","updatePosition","tooltipClass","type","Directive","args","selector","exportAs","host","(longpress)","(keydown)","(touchend)","ElementRef","ScrollDispatcher","ViewContainerRef","NgZone","Platform","AriaDescriber","FocusMonitor","undefined","decorators","Inject","Directionality","Optional","Input","_positionDeprecated","_changeDetectorRef","_breakpointObserver","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_isHandset","observe","Breakpoints","Handset","_hideTimeoutId","clearTimeout","_showTimeoutId","setTimeout","overlayPosition","axis","_animationStart","_animationDone","toState","_handleBodyInteraction","markForCheck","Component","template","styles","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","animations","aria-hidden","ɵ0","NgModule","imports","CommonModule","OverlayModule","MatCommonModule","PlatformModule","A11yModule","LayoutModule","exports","declarations","entryComponents","providers","ARIA_DESCRIBER_PROVIDER","useValue","MatTooltipModule"],"mappings":"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"}